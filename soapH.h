/* soapH.h
   Generated by gSOAP 2.8.33 for SDE.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SDEKey_DEFINED
#define SOAP_TYPE_SDEKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SDEKey(struct soap*, const char*, int, const SDEKey *, const char*);
SOAP_FMAC3 SDEKey * SOAP_FMAC4 soap_in_SDEKey(struct soap*, const char*, SDEKey *, const char*);
SOAP_FMAC1 SDEKey * SOAP_FMAC2 soap_instantiate_SDEKey(struct soap*, int, const char*, const char*, size_t*);

inline SDEKey * soap_new_SDEKey(struct soap *soap, int n = -1)
{
	return soap_instantiate_SDEKey(soap, n, NULL, NULL, NULL);
}

inline SDEKey * soap_new_req_SDEKey(
	struct soap *soap)
{
	SDEKey *_p = soap_new_SDEKey(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline SDEKey * soap_new_set_SDEKey(
	struct soap *soap,
	const std::string& sessionKey)
{
	SDEKey *_p = soap_new_SDEKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->SDEKey::sessionKey = sessionKey;
	}
	return _p;
}

inline int soap_write_SDEKey(struct soap *soap, SDEKey const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SDEKey", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 SDEKey * SOAP_FMAC4 soap_get_SDEKey(struct soap*, SDEKey *, const char*, const char*);

inline int soap_read_SDEKey(struct soap *soap, SDEKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_SDEKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns__registerClass_DEFINED
#define SOAP_TYPE_ns__registerClass_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__registerClass(struct soap*, struct ns__registerClass *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__registerClass(struct soap*, const struct ns__registerClass *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__registerClass(struct soap*, const char*, int, const struct ns__registerClass *, const char*);
SOAP_FMAC3 struct ns__registerClass * SOAP_FMAC4 soap_in_ns__registerClass(struct soap*, const char*, struct ns__registerClass *, const char*);
SOAP_FMAC1 struct ns__registerClass * SOAP_FMAC2 soap_instantiate_ns__registerClass(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__registerClass * soap_new_ns__registerClass(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__registerClass(soap, n, NULL, NULL, NULL);
}

inline struct ns__registerClass * soap_new_req_ns__registerClass(
	struct soap *soap)
{
	struct ns__registerClass *_p = soap_new_ns__registerClass(soap);
	if (_p)
	{	soap_default_ns__registerClass(soap, _p);
	}
	return _p;
}

inline struct ns__registerClass * soap_new_set_ns__registerClass(
	struct soap *soap,
	SDEKey *session,
	std::string *desiredOnyen,
	std::string *desiredClass)
{
	struct ns__registerClass *_p = soap_new_ns__registerClass(soap);
	if (_p)
	{	soap_default_ns__registerClass(soap, _p);
		_p->session = session;
		_p->desiredOnyen = desiredOnyen;
		_p->desiredClass = desiredClass;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__registerClass(struct soap*, const struct ns__registerClass *, const char*, const char*);

inline int soap_write_ns__registerClass(struct soap *soap, struct ns__registerClass const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__registerClass(soap, p), 0) || soap_put_ns__registerClass(soap, p, "ns:registerClass", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__registerClass * SOAP_FMAC4 soap_get_ns__registerClass(struct soap*, struct ns__registerClass *, const char*, const char*);

inline int soap_read_ns__registerClass(struct soap *soap, struct ns__registerClass *p)
{
	if (p)
	{	soap_default_ns__registerClass(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__registerClass(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__registerClassResponse_DEFINED
#define SOAP_TYPE_ns__registerClassResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__registerClassResponse(struct soap*, struct ns__registerClassResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__registerClassResponse(struct soap*, const struct ns__registerClassResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__registerClassResponse(struct soap*, const char*, int, const struct ns__registerClassResponse *, const char*);
SOAP_FMAC3 struct ns__registerClassResponse * SOAP_FMAC4 soap_in_ns__registerClassResponse(struct soap*, const char*, struct ns__registerClassResponse *, const char*);
SOAP_FMAC1 struct ns__registerClassResponse * SOAP_FMAC2 soap_instantiate_ns__registerClassResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__registerClassResponse * soap_new_ns__registerClassResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__registerClassResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__registerClassResponse * soap_new_req_ns__registerClassResponse(
	struct soap *soap,
	const std::string& response)
{
	struct ns__registerClassResponse *_p = soap_new_ns__registerClassResponse(soap);
	if (_p)
	{	soap_default_ns__registerClassResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}

inline struct ns__registerClassResponse * soap_new_set_ns__registerClassResponse(
	struct soap *soap,
	const std::string& response)
{
	struct ns__registerClassResponse *_p = soap_new_ns__registerClassResponse(soap);
	if (_p)
	{	soap_default_ns__registerClassResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__registerClassResponse(struct soap*, const struct ns__registerClassResponse *, const char*, const char*);

inline int soap_write_ns__registerClassResponse(struct soap *soap, struct ns__registerClassResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__registerClassResponse(soap, p), 0) || soap_put_ns__registerClassResponse(soap, p, "ns:registerClassResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__registerClassResponse * SOAP_FMAC4 soap_get_ns__registerClassResponse(struct soap*, struct ns__registerClassResponse *, const char*, const char*);

inline int soap_read_ns__registerClassResponse(struct soap *soap, struct ns__registerClassResponse *p)
{
	if (p)
	{	soap_default_ns__registerClassResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__registerClassResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__addOnyen_DEFINED
#define SOAP_TYPE_ns__addOnyen_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addOnyen(struct soap*, struct ns__addOnyen *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addOnyen(struct soap*, const struct ns__addOnyen *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addOnyen(struct soap*, const char*, int, const struct ns__addOnyen *, const char*);
SOAP_FMAC3 struct ns__addOnyen * SOAP_FMAC4 soap_in_ns__addOnyen(struct soap*, const char*, struct ns__addOnyen *, const char*);
SOAP_FMAC1 struct ns__addOnyen * SOAP_FMAC2 soap_instantiate_ns__addOnyen(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addOnyen * soap_new_ns__addOnyen(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__addOnyen(soap, n, NULL, NULL, NULL);
}

inline struct ns__addOnyen * soap_new_req_ns__addOnyen(
	struct soap *soap)
{
	struct ns__addOnyen *_p = soap_new_ns__addOnyen(soap);
	if (_p)
	{	soap_default_ns__addOnyen(soap, _p);
	}
	return _p;
}

inline struct ns__addOnyen * soap_new_set_ns__addOnyen(
	struct soap *soap,
	SDEKey *session,
	std::string *desiredOnyen,
	std::string *desiredPassword)
{
	struct ns__addOnyen *_p = soap_new_ns__addOnyen(soap);
	if (_p)
	{	soap_default_ns__addOnyen(soap, _p);
		_p->session = session;
		_p->desiredOnyen = desiredOnyen;
		_p->desiredPassword = desiredPassword;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addOnyen(struct soap*, const struct ns__addOnyen *, const char*, const char*);

inline int soap_write_ns__addOnyen(struct soap *soap, struct ns__addOnyen const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__addOnyen(soap, p), 0) || soap_put_ns__addOnyen(soap, p, "ns:addOnyen", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__addOnyen * SOAP_FMAC4 soap_get_ns__addOnyen(struct soap*, struct ns__addOnyen *, const char*, const char*);

inline int soap_read_ns__addOnyen(struct soap *soap, struct ns__addOnyen *p)
{
	if (p)
	{	soap_default_ns__addOnyen(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__addOnyen(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__addOnyenResponse_DEFINED
#define SOAP_TYPE_ns__addOnyenResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addOnyenResponse(struct soap*, struct ns__addOnyenResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addOnyenResponse(struct soap*, const struct ns__addOnyenResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addOnyenResponse(struct soap*, const char*, int, const struct ns__addOnyenResponse *, const char*);
SOAP_FMAC3 struct ns__addOnyenResponse * SOAP_FMAC4 soap_in_ns__addOnyenResponse(struct soap*, const char*, struct ns__addOnyenResponse *, const char*);
SOAP_FMAC1 struct ns__addOnyenResponse * SOAP_FMAC2 soap_instantiate_ns__addOnyenResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addOnyenResponse * soap_new_ns__addOnyenResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__addOnyenResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__addOnyenResponse * soap_new_req_ns__addOnyenResponse(
	struct soap *soap,
	const std::string& response)
{
	struct ns__addOnyenResponse *_p = soap_new_ns__addOnyenResponse(soap);
	if (_p)
	{	soap_default_ns__addOnyenResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}

inline struct ns__addOnyenResponse * soap_new_set_ns__addOnyenResponse(
	struct soap *soap,
	const std::string& response)
{
	struct ns__addOnyenResponse *_p = soap_new_ns__addOnyenResponse(soap);
	if (_p)
	{	soap_default_ns__addOnyenResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addOnyenResponse(struct soap*, const struct ns__addOnyenResponse *, const char*, const char*);

inline int soap_write_ns__addOnyenResponse(struct soap *soap, struct ns__addOnyenResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__addOnyenResponse(soap, p), 0) || soap_put_ns__addOnyenResponse(soap, p, "ns:addOnyenResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__addOnyenResponse * SOAP_FMAC4 soap_get_ns__addOnyenResponse(struct soap*, struct ns__addOnyenResponse *, const char*, const char*);

inline int soap_read_ns__addOnyenResponse(struct soap *soap, struct ns__addOnyenResponse *p)
{
	if (p)
	{	soap_default_ns__addOnyenResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__addOnyenResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getRegisteredClasses_DEFINED
#define SOAP_TYPE_ns__getRegisteredClasses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getRegisteredClasses(struct soap*, struct ns__getRegisteredClasses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getRegisteredClasses(struct soap*, const struct ns__getRegisteredClasses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getRegisteredClasses(struct soap*, const char*, int, const struct ns__getRegisteredClasses *, const char*);
SOAP_FMAC3 struct ns__getRegisteredClasses * SOAP_FMAC4 soap_in_ns__getRegisteredClasses(struct soap*, const char*, struct ns__getRegisteredClasses *, const char*);
SOAP_FMAC1 struct ns__getRegisteredClasses * SOAP_FMAC2 soap_instantiate_ns__getRegisteredClasses(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getRegisteredClasses * soap_new_ns__getRegisteredClasses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getRegisteredClasses(soap, n, NULL, NULL, NULL);
}

inline struct ns__getRegisteredClasses * soap_new_req_ns__getRegisteredClasses(
	struct soap *soap)
{
	struct ns__getRegisteredClasses *_p = soap_new_ns__getRegisteredClasses(soap);
	if (_p)
	{	soap_default_ns__getRegisteredClasses(soap, _p);
	}
	return _p;
}

inline struct ns__getRegisteredClasses * soap_new_set_ns__getRegisteredClasses(
	struct soap *soap,
	SDEKey *session,
	std::string *desiredOnyen)
{
	struct ns__getRegisteredClasses *_p = soap_new_ns__getRegisteredClasses(soap);
	if (_p)
	{	soap_default_ns__getRegisteredClasses(soap, _p);
		_p->session = session;
		_p->desiredOnyen = desiredOnyen;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getRegisteredClasses(struct soap*, const struct ns__getRegisteredClasses *, const char*, const char*);

inline int soap_write_ns__getRegisteredClasses(struct soap *soap, struct ns__getRegisteredClasses const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getRegisteredClasses(soap, p), 0) || soap_put_ns__getRegisteredClasses(soap, p, "ns:getRegisteredClasses", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getRegisteredClasses * SOAP_FMAC4 soap_get_ns__getRegisteredClasses(struct soap*, struct ns__getRegisteredClasses *, const char*, const char*);

inline int soap_read_ns__getRegisteredClasses(struct soap *soap, struct ns__getRegisteredClasses *p)
{
	if (p)
	{	soap_default_ns__getRegisteredClasses(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getRegisteredClasses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getRegisteredClassesResponse_DEFINED
#define SOAP_TYPE_ns__getRegisteredClassesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getRegisteredClassesResponse(struct soap*, struct ns__getRegisteredClassesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getRegisteredClassesResponse(struct soap*, const struct ns__getRegisteredClassesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getRegisteredClassesResponse(struct soap*, const char*, int, const struct ns__getRegisteredClassesResponse *, const char*);
SOAP_FMAC3 struct ns__getRegisteredClassesResponse * SOAP_FMAC4 soap_in_ns__getRegisteredClassesResponse(struct soap*, const char*, struct ns__getRegisteredClassesResponse *, const char*);
SOAP_FMAC1 struct ns__getRegisteredClassesResponse * SOAP_FMAC2 soap_instantiate_ns__getRegisteredClassesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getRegisteredClassesResponse * soap_new_ns__getRegisteredClassesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getRegisteredClassesResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__getRegisteredClassesResponse * soap_new_req_ns__getRegisteredClassesResponse(
	struct soap *soap,
	const std::vector<std::string> & response)
{
	struct ns__getRegisteredClassesResponse *_p = soap_new_ns__getRegisteredClassesResponse(soap);
	if (_p)
	{	soap_default_ns__getRegisteredClassesResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}

inline struct ns__getRegisteredClassesResponse * soap_new_set_ns__getRegisteredClassesResponse(
	struct soap *soap,
	const std::vector<std::string> & response)
{
	struct ns__getRegisteredClassesResponse *_p = soap_new_ns__getRegisteredClassesResponse(soap);
	if (_p)
	{	soap_default_ns__getRegisteredClassesResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getRegisteredClassesResponse(struct soap*, const struct ns__getRegisteredClassesResponse *, const char*, const char*);

inline int soap_write_ns__getRegisteredClassesResponse(struct soap *soap, struct ns__getRegisteredClassesResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getRegisteredClassesResponse(soap, p), 0) || soap_put_ns__getRegisteredClassesResponse(soap, p, "ns:getRegisteredClassesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getRegisteredClassesResponse * SOAP_FMAC4 soap_get_ns__getRegisteredClassesResponse(struct soap*, struct ns__getRegisteredClassesResponse *, const char*, const char*);

inline int soap_read_ns__getRegisteredClassesResponse(struct soap *soap, struct ns__getRegisteredClassesResponse *p)
{
	if (p)
	{	soap_default_ns__getRegisteredClassesResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getRegisteredClassesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getLoginInfo_DEFINED
#define SOAP_TYPE_ns__getLoginInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getLoginInfo(struct soap*, struct ns__getLoginInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getLoginInfo(struct soap*, const struct ns__getLoginInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getLoginInfo(struct soap*, const char*, int, const struct ns__getLoginInfo *, const char*);
SOAP_FMAC3 struct ns__getLoginInfo * SOAP_FMAC4 soap_in_ns__getLoginInfo(struct soap*, const char*, struct ns__getLoginInfo *, const char*);
SOAP_FMAC1 struct ns__getLoginInfo * SOAP_FMAC2 soap_instantiate_ns__getLoginInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getLoginInfo * soap_new_ns__getLoginInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getLoginInfo(soap, n, NULL, NULL, NULL);
}

inline struct ns__getLoginInfo * soap_new_req_ns__getLoginInfo(
	struct soap *soap)
{
	struct ns__getLoginInfo *_p = soap_new_ns__getLoginInfo(soap);
	if (_p)
	{	soap_default_ns__getLoginInfo(soap, _p);
	}
	return _p;
}

inline struct ns__getLoginInfo * soap_new_set_ns__getLoginInfo(
	struct soap *soap,
	SDEKey *session,
	std::string *desiredOnyen)
{
	struct ns__getLoginInfo *_p = soap_new_ns__getLoginInfo(soap);
	if (_p)
	{	soap_default_ns__getLoginInfo(soap, _p);
		_p->session = session;
		_p->desiredOnyen = desiredOnyen;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getLoginInfo(struct soap*, const struct ns__getLoginInfo *, const char*, const char*);

inline int soap_write_ns__getLoginInfo(struct soap *soap, struct ns__getLoginInfo const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getLoginInfo(soap, p), 0) || soap_put_ns__getLoginInfo(soap, p, "ns:getLoginInfo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getLoginInfo * SOAP_FMAC4 soap_get_ns__getLoginInfo(struct soap*, struct ns__getLoginInfo *, const char*, const char*);

inline int soap_read_ns__getLoginInfo(struct soap *soap, struct ns__getLoginInfo *p)
{
	if (p)
	{	soap_default_ns__getLoginInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getLoginInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getLoginInfoResponse_DEFINED
#define SOAP_TYPE_ns__getLoginInfoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getLoginInfoResponse(struct soap*, struct ns__getLoginInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getLoginInfoResponse(struct soap*, const struct ns__getLoginInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getLoginInfoResponse(struct soap*, const char*, int, const struct ns__getLoginInfoResponse *, const char*);
SOAP_FMAC3 struct ns__getLoginInfoResponse * SOAP_FMAC4 soap_in_ns__getLoginInfoResponse(struct soap*, const char*, struct ns__getLoginInfoResponse *, const char*);
SOAP_FMAC1 struct ns__getLoginInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getLoginInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getLoginInfoResponse * soap_new_ns__getLoginInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getLoginInfoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__getLoginInfoResponse * soap_new_req_ns__getLoginInfoResponse(
	struct soap *soap,
	const std::string& response)
{
	struct ns__getLoginInfoResponse *_p = soap_new_ns__getLoginInfoResponse(soap);
	if (_p)
	{	soap_default_ns__getLoginInfoResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}

inline struct ns__getLoginInfoResponse * soap_new_set_ns__getLoginInfoResponse(
	struct soap *soap,
	const std::string& response)
{
	struct ns__getLoginInfoResponse *_p = soap_new_ns__getLoginInfoResponse(soap);
	if (_p)
	{	soap_default_ns__getLoginInfoResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getLoginInfoResponse(struct soap*, const struct ns__getLoginInfoResponse *, const char*, const char*);

inline int soap_write_ns__getLoginInfoResponse(struct soap *soap, struct ns__getLoginInfoResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getLoginInfoResponse(soap, p), 0) || soap_put_ns__getLoginInfoResponse(soap, p, "ns:getLoginInfoResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getLoginInfoResponse * SOAP_FMAC4 soap_get_ns__getLoginInfoResponse(struct soap*, struct ns__getLoginInfoResponse *, const char*, const char*);

inline int soap_read_ns__getLoginInfoResponse(struct soap *soap, struct ns__getLoginInfoResponse *p)
{
	if (p)
	{	soap_default_ns__getLoginInfoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getLoginInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToSDEKey_DEFINED
#define SOAP_TYPE_PointerToSDEKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSDEKey(struct soap*, SDEKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSDEKey(struct soap*, const char *, int, SDEKey *const*, const char *);
SOAP_FMAC3 SDEKey ** SOAP_FMAC4 soap_in_PointerToSDEKey(struct soap*, const char*, SDEKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSDEKey(struct soap*, SDEKey *const*, const char*, const char*);
SOAP_FMAC3 SDEKey ** SOAP_FMAC4 soap_get_PointerToSDEKey(struct soap*, SDEKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
